[project]
name = "picopt"
requires-python = ">=3.10"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "picopt"
version = "4.0.4"
description = "A multi format lossless image optimizer that uses external tools"
license = "GPL-3.0-only"
authors = ["AJ Slater <aj@slater.net>"]
readme = "README.md"
homepage = "https://github.com/ajslater/picopt"
documentation = "https://github.com/ajslater/picopt"
keywords = ["image", "png", "jpg", "cbz", "cbr"]
classifiers = [
  "Topic :: Internet :: WWW/HTTP :: Site Management",
  "Topic :: Multimedia :: Graphics :: Graphics Conversion",
  "Operating System :: OS Independent",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Environment :: Console",
  "Programming Language :: Python :: 3 :: Only",
  "Typing :: Typed",
]
packages = [{ include = "picopt" }, { include = "tests", format = "sdist" }]
include = ["NEWS.md"]

[tool.poetry.dependencies]
python = "^3.10"
confuse = "^2.0.0"
humanize = "^4.0.0"
piexif = "^1.1.3"
pyoxipng = "^9.0.0"
python-dateutil = "^2.8"
rarfile = "^4.0"
"ruamel.yaml" = "^0.18.5"
termcolor = "^2.0.1"
treestamps = "^1.0.1"
Pillow = ">=9.5"
defusedxml = "^0.7.1"

[tool.poetry.group.dev.dependencies]
codespell = "^2.1.0"
coverage = { extras = ["toml"], version = "^7.0" }
neovim = "^0.3.1"
pyright = "^1.1.237"
pytest-cov = "^6.0"
pytest-gitignore = "^1.3"
radon = { version = "^6.0.1", extras = ["toml"] }
ruff = "^0.8.4"
types-python-dateutil = "^2.8.0"
vulture = "^2.1"

[tool.poetry.scripts]
picopt = "picopt.cli:main"

[tool.poetry.urls]
Source = "https://github.com/ajslater/picopt"
Issues = "https://github.com/ajslater/picopt/issues"

[tool.codespell]
skip = ".git,.mypy_cache,.pytest_cache,.ruff_cache,.venv,*~,./dist,./node_modules,./package-lock.json,./poetry.lock,./test-results"
builtin = "clear,rare,code"
check-hidden = true
ignore-words-list = "thead"

[tool.coverage.run]
source = ["picopt"]
branch = true
concurrency = ["multiprocessing"]
omit = [
  ".git/*",
  ".mypy_cache/*",
  ".pytest_cache/*",
  ".ruff_cache/*",
  ".venv/*",
  "*__pycache__*",
  "dist/*",
  "node_modules/*",
  "test-results/*",
  "typings/*",
]

[tool.coverage.html]
directory = "test-results/coverage"

[tool.pytest.ini_options]
addopts = "--junitxml=test-results/pytest/junit.xml -ra --strict-markers --cov --cov-append --cov-report=html --cov-report=term"
junit_family = "xunit2"
testpaths = "tests"

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/node_modules",
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  ".ruff_cache",
  ".venv",
  "dist",
  "package-lock.json",
  "poetry.lock",
  "test-results",
  "typings",
  "vulture_whitelist.py",
]
pythonVersion = "3.10"
pythonPlatform = "All"
reportImportCycles = true
reportMisingImports = true
useLibraryCodeForTypes = true

[tool.radon]
exclude = "*~,.git/*,.mypy_cache/*,.pytest_cache/*,.ruff_cache/*,.venv/*,__pycache__/*,dist/*,node_modules/*,test-results/*,typings/*"

[tool.ruff]
extend-exclude = ["cache", "typings"]
target-version = "py310"

[tool.ruff.lint]
extend-ignore = [
  "BLE001",  # catch bare exception
  "COM812",  # missing trailing comma
  "COM819",  # prohibit trailing comma
  "D203",    # blank line before class docstring
  "D206",    # formatted
  "D212",    # first line multi line docstring.
  "E111",    # formatted
  "E114",    # formatted
  "E117",    # over-indented
  "E501",    # 88 char line
  "FBT001",  # boolean params
  "ISC001",  # formatted
  "PERF203", # try block in loop 
  "S101",    # assert
  "W191",    # formatted
]
extend-select = [
  "A",
  # "AIR",
  # "ANN",
  "ARG",
  "ASYNC",
  "B",
  "B9",
  "BLE",
  "C",
  "C4",
  "C90",
  "COM",
  # "CPY",
  "D",
  "DJ",
  # "DOC",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "EXE",
  "F",
  "FA",
  # "FAST",
  "FBT",
  "FIX",
  "FLY",
  # "FURB",
  # "G",
  "I",
  "ICN",
  "INP",
  "INT",
  "ISC",
  "LOG",
  # "PD",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  # "Q", Formatted
  "N",
  # NPY,
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "T20",
  "TC",
  "TCH",
  # "TD",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
]
external = ["V101"]
task-tags = ["TODO", "FIXME", "XXX", "http", "HACK"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["SLF001", "T201", "T203"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.vulture]
exclude = [
  ".git/",
  ".mypy_cache/",
  ".pytest_cache",
  ".ruff_cache",
  ".venv",
  "*__pycache__*",
]
min_confidence = 61
sort_by_size = true
