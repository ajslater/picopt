[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = ["poetry.core.masonry.api"]

[tool.poetry]
name = "picopt"
version = "3.0.0-rc0"
description = "A multi format lossless image optimizer that uses external tools"
license = "GPL-2.0-only"
authors = ["AJ Slater <aj@slater.net>"]
readme = "README.md"
homepage = "https://github.com/ajslater/picopt"
documentation = "https://github.com/ajslater/picopt"
keywords = ["image", "png", "jpg", "cbz", "cbr"]
classifiers = [
  "Topic :: Internet :: WWW/HTTP :: Site Management",
  "Topic :: Multimedia :: Graphics :: Graphics Conversion",
  "Operating System :: OS Independent",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Environment :: Console",
  "Programming Language :: Python :: 3"
]
packages = [{ include = "picopt" }, { include = "tests", format = "sdist" }]
include = ["NEWS"]

[tool.poetry.dependencies]
python = "^3.8"
python-dateutil = "^2.8"
rarfile = "^4.0"
"ruamel.yaml" = "^0.17.16"
Pillow = "^6 || ^7 || ^8 || ^9"

[tool.poetry.dev-dependencies]
codespell = "^2.1.0"
coverage = { extras = ["toml"], version = "^6.3" }
flake8 = "^4.0"
flake8-black = "^0.2.1"
flake8-bugbear = "^22.1"
flake8-docstrings = "^1.5.0"
mypy = "^0.931"
monkeytype = "^21.5"
neovim = "^0.3.1"
pep8-naming = "^0.12.1"
pip-review = "^1.1.0"
pynvim = "^0.4"
pytest = "^7.0.0"
pytest-bandit = "^0.6.1"
pytest-black = "^0.3.10"
pytest-cov = "^3.0"
pytest-flake8 = "^1.0"
pytest-gitignore = "^1.3"
pytest-isort = "^3.0.0"
pytest-monkeytype = "^1.0"
pytest-mypy = "^0.9.1"
radon = "^5.1"
types-python-dateutil = "^2.8.0"
vulture = "^2.1"

[tool.poetry.scripts]
picopt = "picopt.cli:main"

[tool.poetry.urls]
"Source" = "https://github.com/ajslater/picopt"
"Issues" = "https://github.com/ajslater/picopt/issues"

[tool.black]
exclude = "/(.git|.mypy_cache|.pytest_cache|.venv|__pycache__|dist|node_modules|test-results|typings)/"


[tool.coverage.run]
source = ["picopt"]
branch = true
concurrency = ["multiprocessing"]
omit = [                          
  ".git/*",                                                                                                       
  ".mypy_cache/*",                                                                                                
  ".pytest_cache/*",                                                                                              
  ".venv/*",                                                                                                      
  "*__pycache__*",                                                                                                
  "dist/*",                                                                                                       
  "node_modules/*",                                                                                               
  "test-results/*",                                                                                               
  "typings/*"                                                                                                     
]

[tool.coverage.html]
directory = "test-results/coverage"

[tool.pytest.ini_options]
junit_family = "xunit2"
addopts = """
  --junitxml=test-results/pytest/junit.xml
  -ra
  --strict-markers
  --bandit
  --black
  --cov
  --cov-append
  --cov-report=html
  --cov-report=term
  --flake8
  --isort
  --mypy
  --ignore=.git
  --ignore=.mypy_cache
  --ignore=.pytest_cache
  --ignore=.venv
  --ignore=dist
  --ignore=node_modules
  --ignore=test-results
  --ignore=typings
  --ignore=vulture_whitelist.py
  --ignore-glob=*__pycache__*
"""

[tool.vulture]
sort_by_size = true
exclude = [
  ".git/", 
  ".mypy_cache/",
  ".pytest_cache",
  ".venv",
  "*__pycache__*",
]

[tool.pyright]
exclude = [
  "**/__pycache__",
  "**/node_modules",
  ".git",
  ".mypy_cache",
  ".pytest_cache",
  ".venv",
  "dist",
  "package-lock.json",
  "poetry.lock",
  "test-results",
  "typings",
  "vulture_whitelist.py"
]
useLibraryCodeForTypes = true
reportMissingImports = true
reportImportCycles = true
